import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Kernels
import Mathlib.CategoryTheory.Preadditive.Basic

noncomputable section

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open CategoryTheory CategoryTheory.Category CategoryTheory.Limits

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [Preadditive C]
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [HasZeroMorphisms D]

namespace CategoryTheory.Limits

namespace KernelFork

variable {X Y : C} {f : X ‚ü∂ Y} (c : CokernelCofork f)
  (G : C ‚•§ D) [Functor.PreservesZeroMorphisms G]

namespace CategoryTheory.Limits

def IsCokernelOfSplit {Z : C} {p : Y ‚ü∂ Z} (zero : f ‚â´ p = 0) (hp : SplitEpi p)
    (hf : ‚àÉ (g : Y ‚ü∂ X), p ‚â´ hp.section_ = g ‚â´ f + ùüô _) :
    IsColimit (CokernelCofork.ofœÄ (f := f) p zero) where
  desc s := hp.section_ ‚â´ Cofork.œÄ s
  fac s j := match j with
  | WalkingParallelPair.zero => by
    dsimp
    rw [CokernelCofork.œÄ_eq_zero s, zero, zero_comp]
  | WalkingParallelPair.one => by
    dsimp
    rw [‚Üê assoc, hf.choose_spec]
    simp
  uniq s m hm := by
    have := hp.epi
    rw [‚Üê cancel_epi p]
    dsimp
    rw [‚Üê assoc, hf.choose_spec]
    simp
    exact hm WalkingParallelPair.one


end CategoryTheory.Limits
