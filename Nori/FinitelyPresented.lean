import Mathlib.CategoryTheory.Abelian.FunctorCategory
import Mathlib.Algebra.Category.Grp.AB
import Mathlib.CategoryTheory.ObjectProperty.ContainsZero
import Mathlib.Algebra.Category.Grp.Zero
import Mathlib.CategoryTheory.Abelian.DiagramLemmas.KernelCokernelComp
import Nori.Mathlib.CategoryTheory.Limits.Shapes.Kernels
import Nori.Mathlib.CategoryTheory.Preadditive.Yoneda.Basic
import Nori.Mathlib.CategoryTheory.Limits.Shapes.Biproducts
import Nori.Mathlib.CategoryTheory.Abelian.Subcategory
import Nori.AbelianLemmas

noncomputable section

universe u v w u' v'

open CategoryTheory Category Limits Opposite ObjectProperty

open scoped ZeroObject

namespace Nori

variable (C : Type u) [Category.{v} C]

def IsFinitelyPresented : ObjectProperty (C·µí·µñ ‚•§ AddCommGrp.{v}) :=
  fun X ‚Ü¶ ‚àÉ (A B : C·µí·µñ ‚•§ AddCommGrp.{v}) (u : A ‚ü∂ X) (_ : Epi u) (v : B ‚ü∂ kernel u) (_ : Epi v),
  (A ‚ãô forget AddCommGrp).IsRepresentable ‚àß (B ‚ãô forget AddCommGrp).IsRepresentable

abbrev FinitelyPresented := (IsFinitelyPresented C).FullSubcategory

variable {C}

lemma isFinitelyPresented_iff_shortComplex_representable (X : C·µí·µñ ‚•§ AddCommGrp.{v}) :
    IsFinitelyPresented C X ‚Üî ‚àÉ (A B : C·µí·µñ ‚•§ AddCommGrp.{v}) (f : A ‚ü∂ B)
    (g : B ‚ü∂ X) (_ : Epi g) (zero : f ‚â´ g = 0), (A ‚ãô forget AddCommGrp).IsRepresentable ‚àß
    (B ‚ãô forget AddCommGrp).IsRepresentable ‚àß (ShortComplex.mk f g zero).Exact := by
  refine ‚ü®fun ‚ü®A, B, u, hu, v, hv, hA, hB‚ü© ‚Ü¶ ?_, fun ‚ü®A, B, f, g, hg, zero, hA, hB, h‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ use B, A, v ‚â´ kernel.Œπ u, u, hu
    simp only [Functor.comp_obj, Functor.flip_obj_obj, assoc, kernel.condition, comp_zero,
      exists_and_left, exists_true_left]
    refine ‚ü®hB, hA, ?_‚ü©
    rw [ShortComplex.exact_iff_epi_kernel_lift]
    dsimp
    have eq : kernel.lift u (v ‚â´ kernel.Œπ u) (by simp) = v := by
      rw [‚Üê cancel_mono (kernel.Œπ u)]
      simp
    rw [eq]
    exact hv
  ¬∑ use B, A, g, hg, kernel.lift g f zero
    simp only [Functor.comp_obj, Functor.flip_obj_obj, exists_and_left, exists_prop]
    refine ‚ü®hB, ?_, hA‚ü©
    rw [ShortComplex.exact_iff_epi_kernel_lift] at h
    exact h

instance : (IsFinitelyPresented C).IsClosedUnderIsomorphisms where
  of_iso Œ± h := by
    obtain ‚ü®A, B, u, _, v, _, _, _‚ü© := h
    use A, B, u ‚â´ Œ±.hom, inferInstance,
      v ‚â´ (kernel.mapIso u (u ‚â´ Œ±.hom) (Iso.refl _) Œ± (by simp)).hom, inferInstance

section ZeroObject

variable [HasZeroObject C]

instance (X : C·µí·µñ) : Unique (((0 : C·µí·µñ ‚•§ AddCommGrp.{w}) ‚ãô forget AddCommGrp).obj X) := by
  have : Unique ((forget AddCommGrp).obj (AddCommGrp.of PUnit.{w + 1})) := by
    change Unique PUnit.{w + 1}
    infer_instance
  exact Equiv.unique ((forget AddCommGrp).mapIso (IsZero.isoZero (Functor.zero_obj X))
    ‚â™‚â´ ((forget AddCommGrp).mapIso (IsZero.isoZero (AddCommGrp.isZero_of_subsingleton
      (AddCommGrp.of.{w} PUnit)))).symm).toEquiv

instance : ((0 : C·µí·µñ ‚•§ AddCommGrp.{v}) ‚ãô forget AddCommGrp).IsRepresentable where
  has_representation := by
    use 0
    exact Nonempty.intro
      {homEquiv := Equiv.ofUnique _ _, homEquiv_comp _ _ := Subsingleton.elim _ _}

lemma IsFinitelyPresented_of_isRepresentable (X : C·µí·µñ ‚•§ AddCommGrp)
    [(X ‚ãô forget AddCommGrp).IsRepresentable] : IsFinitelyPresented C X := by
  use X, 0, ùüô X, inferInstance, 0, IsZero.epi (IsZero.of_iso (isZero_zero _)
    (kernel.ofMono (ùüô X))) _
  refine ‚ü®inferInstance, inferInstance‚ü©

instance : (IsFinitelyPresented C).ContainsZero where
  exists_zero :=
    ‚ü®0, ‚ü®isZero_zero _, IsFinitelyPresented_of_isRepresentable _‚ü©‚ü©

end ZeroObject

section Additive

variable [Preadditive C] [HasFiniteProducts C]

instance {X : C} : (preadditiveYoneda.obj X ‚ãô forget AddCommGrp).IsRepresentable :=
  Functor.instIsRepresentableObjOppositeTypeYoneda

instance : HasFiniteBiproducts C where
  out _ := {has_biproduct _ := HasBiproduct.of_hasProduct _ }

instance : HasBinaryBiproducts C := hasBinaryBiproducts_of_finite_biproducts C

lemma representableBy_zero {F : C·µí·µñ ‚•§ AddCommGrp.{v}} {Y : C}
    (r : (F ‚ãô forget AddCommGrp).RepresentableBy Y) (X : C) :
    r.homEquiv (X := X) 0 = 0 := by
  let œÄ : X ‚ü∂ 0 := 0
  have eq : (0 : X ‚ü∂ Y) = œÄ ‚â´ 0 := comp_zero.symm
  have eq' : r.homEquiv (X := 0) 0 = 0 := by
    have : Subsingleton ((F ‚ãô forget AddCommGrp).obj (op 0)) :=
      Equiv.subsingleton (r.homEquiv (X := 0)).symm
    exact Subsingleton.elim _ _
  rw [eq, r.homEquiv_comp œÄ 0, eq']
  simp only [Functor.comp_obj, Functor.comp_map, ConcreteCategory.forget_map_eq_coe, map_zero]

lemma representableBy_sum {F : C·µí·µñ ‚•§ AddCommGrp.{v}} {Y : C}
    (r : (F ‚ãô forget AddCommGrp).RepresentableBy Y) {X : C} (f g : X ‚ü∂ Y) :
    r.homEquiv (f + g) = r.homEquiv f + r.homEquiv g := by
  have : ‚àÄ (u v : F.obj (op (biprod X X))),
      (F ‚ãô forget AddCommGrp).map biprod.inl.op u = (F ‚ãô forget AddCommGrp).map biprod.inl.op v ‚Üí
      (F ‚ãô forget AddCommGrp).map biprod.inr.op u = (F ‚ãô forget AddCommGrp).map biprod.inr.op v ‚Üí
      u = v := by
    intro u v h‚ÇÅ h‚ÇÇ
    apply r.homEquiv.symm.injective
    have eq : biprod.inl ‚â´ r.homEquiv.symm u = biprod.inl ‚â´ r.homEquiv.symm v := by
      rw [r.comp_homEquiv_symm, r.comp_homEquiv_symm]
      congr
    have eq' : biprod.inr ‚â´ r.homEquiv.symm u = biprod.inr ‚â´ r.homEquiv.symm v := by
      rw [r.comp_homEquiv_symm, r.comp_homEquiv_symm]
      congr
    rw [‚Üê id_comp (r.homEquiv.symm u), ‚Üê biprod.total, Preadditive.add_comp, assoc, assoc, eq,
      eq', ‚Üê assoc, ‚Üê assoc, ‚Üê Preadditive.add_comp, biprod.total, id_comp]
  have eq : f + g = biprod.lift (ùüô _) (ùüô _) ‚â´ biprod.desc f g := by simp
  have eq' : r.homEquiv (biprod.desc f g) = r.homEquiv (biprod.desc f 0)
      + r.homEquiv (biprod.desc 0 g) := by
    refine this _ _ ?_ ?_
    ¬∑ rw [‚Üê r.homEquiv_comp biprod.inl]
      dsimp
      rw [biprod.inl_desc, map_add]
      change _ = (F ‚ãô forget AddCommGrp).map biprod.inl.op _ +
        ((F ‚ãô forget AddCommGrp).map) biprod.inl.op _
      conv_rhs => erw [‚Üê r.homEquiv_comp biprod.inl (biprod.desc f 0),
                    ‚Üê r.homEquiv_comp biprod.inl (biprod.desc 0 g)]
      rw [biprod.inl_desc, biprod.inl_desc, representableBy_zero, add_zero]
      rfl
    ¬∑ rw [‚Üê r.homEquiv_comp biprod.inr]
      dsimp
      rw [biprod.inr_desc, map_add]
      change _ = (F ‚ãô forget AddCommGrp).map biprod.inr.op _ +
        ((F ‚ãô forget AddCommGrp).map) biprod.inr.op _
      conv_rhs => erw [‚Üê r.homEquiv_comp biprod.inr (biprod.desc f 0),
                    ‚Üê r.homEquiv_comp biprod.inr (biprod.desc 0 g)]
      rw [biprod.inr_desc, biprod.inr_desc, representableBy_zero, zero_add]
      rfl
  rw [eq, r.homEquiv_comp, eq']
  simp only [Functor.comp_obj, Functor.comp_map, ConcreteCategory.forget_map_eq_coe, map_add]
  change (F ‚ãô forget AddCommGrp).map _ _ + ((F ‚ãô forget AddCommGrp).map) _ _ = _
  erw [‚Üê r.homEquiv_comp, ‚Üê r.homEquiv_comp, biprod.lift_desc, biprod.lift_desc, id_comp,
    comp_zero, add_zero, id_comp, zero_add]
  rfl

def Functor.representableByEquivAdd {F : C·µí·µñ ‚•§ AddCommGrp.{v}} {Y : C} :
    (F ‚ãô forget AddCommGrp).RepresentableBy Y ‚âÉ (preadditiveYoneda.obj Y ‚âÖ F) where
  toFun r := by
    refine NatIso.ofComponents (fun X ‚Ü¶ AddEquiv.toAddCommGrpIso ?_) (fun f ‚Ü¶ ?_)
    ¬∑ dsimp
      refine {r.homEquiv (X := unop X) with map_add' := representableBy_sum r}
    ¬∑ ext a
      exact r.homEquiv_comp f.unop a
  invFun e := Functor.representableByEquiv.invFun (isoWhiskerRight e (forget AddCommGrp))
  left_inv r := rfl
  right_inv e := rfl

lemma Functor.representableByEquivAdd_forget {F : C·µí·µñ ‚•§ AddCommGrp.{v}} {Y : C}
    (r : (F ‚ãô forget AddCommGrp).RepresentableBy Y) :
    isoWhiskerRight (Functor.representableByEquivAdd.toFun r) (forget AddCommGrp) =
    Functor.representableByEquiv.toFun r := by aesop

section Presentation

def IsFinitelyPresented.presentation_A {X : C·µí·µñ ‚•§ AddCommGrp} (hX : IsFinitelyPresented C X) :
    C := by
  have h := (isFinitelyPresented_iff_shortComplex_representable X).mp hX
  have := h.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.1
  exact (h.choose ‚ãô forget AddCommGrp).reprX

def IsFinitelyPresented.presentation_B {X : C·µí·µñ ‚•§ AddCommGrp} (hX : IsFinitelyPresented C X) :
    C := by
  have h := (isFinitelyPresented_iff_shortComplex_representable X).mp hX
  have := h.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.2.1
  exact (h.choose_spec.choose ‚ãô forget AddCommGrp).reprX

def IsFinitelyPresented.presentation_map_f {X : C·µí·µñ ‚•§ AddCommGrp} (hX : IsFinitelyPresented C X) :
    hX.presentation_A ‚ü∂ hX.presentation_B := by
  have h := (isFinitelyPresented_iff_shortComplex_representable X).mp hX
  have := h.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.1
  have := h.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.2.1
  set f := h.choose_spec.choose_spec.choose
  set fA := Functor.representableByEquivAdd (h.choose ‚ãô forget AddCommGrp).representableBy
  set fB := Functor.representableByEquivAdd (h.choose_spec.choose ‚ãô
    forget AddCommGrp).representableBy
  exact preadditiveYoneda.preimage (fA.hom ‚â´ f ‚â´ fB.inv)

def IsFinitelyPresented.presentation_map_p {X : C·µí·µñ ‚•§ AddCommGrp} (hX : IsFinitelyPresented C X) :
    preadditiveYoneda.obj hX.presentation_B ‚ü∂ X := by
  have h := (isFinitelyPresented_iff_shortComplex_representable X).mp hX
  have := h.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.2.1
  exact (Functor.representableByEquivAdd (h.choose_spec.choose ‚ãô
    forget AddCommGrp).representableBy).hom ‚â´ h.choose_spec.choose_spec.choose_spec.choose

lemma IsFinitelyPresented.presentation_map_f_p {X : C·µí·µñ ‚•§ AddCommGrp}
    (hX : IsFinitelyPresented C X) :
    preadditiveYoneda.map hX.presentation_map_f ‚â´ hX.presentation_map_p = 0 := by
  have h := (isFinitelyPresented_iff_shortComplex_representable X).mp hX
  dsimp [IsFinitelyPresented.presentation_map_f, IsFinitelyPresented.presentation_map_p]
  rw [Functor.map_preimage]
  simp only [assoc, Iso.inv_hom_id_assoc, Preadditive.IsIso.comp_left_eq_zero]
  exact h.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose

def IsFinitelyPresented.presentation_cokernel {X : C·µí·µñ ‚•§ AddCommGrp.{v}}
    (hX : IsFinitelyPresented C X) :
    IsColimit (CokernelCofork.ofœÄ hX.presentation_map_p hX.presentation_map_f_p) := by
  have h := (isFinitelyPresented_iff_shortComplex_representable X).mp hX
  have := h.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.1
  have := h.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.2.1
  have : Epi h.choose_spec.choose_spec.choose_spec.choose :=
    h.choose_spec.choose_spec.choose_spec.choose_spec.choose
  set fA := Functor.representableByEquivAdd (h.choose ‚ãô forget AddCommGrp).representableBy
  set fB := Functor.representableByEquivAdd (h.choose_spec.choose ‚ãô
    forget AddCommGrp).representableBy
  have := h.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.2.2.gIsCokernel
  refine (IsColimit.equivOfNatIsoOfIso ?_ _ _ ?_).toFun this
  ¬∑ refine NatIso.ofComponents ?_ ?_
    ¬∑ intro x
      match x with
      | WalkingParallelPair.zero => exact fA.symm
      | WalkingParallelPair.one => exact fB.symm
    ¬∑ intro _ _ u
      match u with
      | WalkingParallelPairHom.id _ => simp
      | WalkingParallelPairHom.left =>
        dsimp [IsFinitelyPresented.presentation_map_f]
        rw [preadditiveYoneda.map_preimage]
        change _ = fA.inv ‚â´ fA.hom ‚â´ _
        rw [Iso.inv_hom_id_assoc]
        rfl
      | WalkingParallelPairHom.right =>
        dsimp
        simp
  ¬∑ refine Cocones.ext (Iso.refl _) ?_
    intro x
    match x with
    | WalkingParallelPair.zero =>
      dsimp
      rw [hX.presentation_map_f_p, comp_id,
        h.choose_spec.choose_spec.choose_spec.choose_spec.choose_spec.choose, comp_zero]
    | WalkingParallelPair.one =>
      dsimp
      rw [comp_id]
      rfl

instance {X : C·µí·µñ ‚•§ AddCommGrp.{v}} (hX : IsFinitelyPresented C X) :
    Epi hX.presentation_map_p := epi_of_isColimit_cofork hX.presentation_cokernel

def IsFinitelyPresented.presentation_iso {X : C·µí·µñ ‚•§ AddCommGrp} (hX : IsFinitelyPresented C X) :
    X ‚âÖ cokernel (preadditiveYoneda.map (hX.presentation_map_f)) :=
  hX.presentation_cokernel.coconePointUniqueUpToIso (colimit.isColimit (parallelPair
    (preadditiveYoneda.map (hX.presentation_map_f)) 0))

end Presentation

lemma IsRepresentable_proj (A B X : C·µí·µñ ‚•§ AddCommGrp.{v}) [(A ‚ãô forget AddCommGrp).IsRepresentable]
    [(B ‚ãô forget AddCommGrp).IsRepresentable] (f : A ‚ü∂ X) (g : B ‚ü∂ X) [Epi g] :
    ‚àÉ (h : A ‚ü∂ B), f = h ‚â´ g := by
  set eA := Functor.representableByEquiv.toFun (A ‚ãô forget AddCommGrp).representableBy
  set eB := Functor.representableByEquiv.toFun (B ‚ãô forget AddCommGrp).representableBy
  set fA := Functor.representableByEquivAdd.toFun (A ‚ãô forget AddCommGrp).representableBy
  set fB := Functor.representableByEquivAdd.toFun (B ‚ãô forget AddCommGrp).representableBy
  have : Epi (g.app ((op (A ‚ãô forget AddCommGrp).reprX))) := inferInstance
  rw [AddCommGrp.epi_iff_surjective] at this
  obtain ‚ü®x, hx‚ü© := this (yonedaEquiv (eA.hom ‚â´ whiskerRight f (forget AddCommGrp)))
  set h' : A ‚ãô forget AddCommGrp ‚ü∂ B ‚ãô forget AddCommGrp := eA.inv ‚â´ yonedaEquiv.invFun x
  have eq : h' ‚â´  whiskerRight g (forget AddCommGrp) = whiskerRight f (forget AddCommGrp) := by
    dsimp [h']
    rw [‚Üê cancel_epi eA.hom, ‚Üê assoc, ‚Üê assoc, Iso.hom_inv_id, id_comp]
    apply yonedaEquiv.injective
    rw [yonedaEquiv_comp]; erw [Equiv.apply_symm_apply]
    simp only [Functor.comp_obj, whiskerRight_app, ConcreteCategory.forget_map_eq_coe, h']
    rw [hx]
    rfl
  set h := fA.inv ‚â´ preadditiveYoneda.map ((eB.symm.app
    (op (A ‚ãô forget AddCommGrp).reprX)).toEquiv x) ‚â´ fB.hom
  have eqA : eA = isoWhiskerRight fA (forget AddCommGrp) :=
    (Functor.representableByEquivAdd_forget _).symm
  have eqB : eB = isoWhiskerRight fB (forget AddCommGrp) :=
    (Functor.representableByEquivAdd_forget _).symm
  have eq' : whiskerRight h (forget AddCommGrp) = h' := by
    have eqx : (yonedaEquiv (F := B ‚ãô forget AddCommGrp)).symm x =
        yoneda.map ((eB.symm.app (op (A ‚ãô forget AddCommGrp).reprX)).toEquiv x) ‚â´ eB.hom := by
      ext
      dsimp [eB]
      erw [yonedaEquiv_symm_app_apply]
      simp [Functor.representableByEquiv]
      erw [(B ‚ãô forget AddCommGrp).representableBy.homEquiv_comp, Equiv.apply_symm_apply]
      rfl
    dsimp [h', h]
    conv_rhs => erw [eqx]
    rw [eqA, eqB]
    rfl
  use h
  ext1; ext1 Y
  apply (forget AddCommGrp).map_injective
  rw [NatTrans.comp_app, (forget AddCommGrp).map_comp, ‚Üê whiskerRight_app h, eq',
    ‚Üê whiskerRight_app g, ‚Üê NatTrans.comp_app, eq, whiskerRight_app]

end Additive

section FiniteProducts

variable [Preadditive C] [HasFiniteProducts C]

instance (n : ‚Ñï) (c : Fin n ‚Üí (C·µí·µñ ‚•§ AddCommGrp.{v}))
    [‚àÄ i, (c i ‚ãô forget AddCommGrp).IsRepresentable] :
    (biproduct c ‚ãô forget AddCommGrp).IsRepresentable where
  has_representation := ‚ü®biproduct (fun i ‚Ü¶ (c i ‚ãô forget AddCommGrp).reprX),
     Nonempty.intro (Functor.representableByEquivAdd.invFun (biproduct.uniqueUpToIso _
     (isBilimitOfPreserves (preadditiveYoneda (C := C)) (biproduct.isBilimit _)) ‚â™‚â´
     biproduct.mapIso (fun i ‚Ü¶ Functor.representableByEquivAdd.toFun
    (c i ‚ãô forget AddCommGrp).representableBy)))‚ü©

lemma IsRepresentable_isClosedUnderBinaryBiproduct (A B : C·µí·µñ ‚•§ AddCommGrp.{v})
    (hc : (A ‚ãô forget AddCommGrp).IsRepresentable) (hB : (B ‚ãô forget AddCommGrp).IsRepresentable) :
    (biprod A B ‚ãô forget AddCommGrp).IsRepresentable where
  has_representation :=
    have := preservesBinaryBiproduct_of_preservesBiproduct (preadditiveYoneda (C := C))
    ‚ü®biprod (A ‚ãô forget AddCommGrp).reprX (B ‚ãô forget AddCommGrp).reprX, Nonempty.intro
    ((Functor.representableByEquivAdd.invFun (biprod.uniqueUpToIso _ _ (isBinaryBilimitOfPreserves
    (preadditiveYoneda (C := C)) ((BinaryBiproduct.isBilimit (A ‚ãô forget AddCommGrp).reprX
    (B ‚ãô forget AddCommGrp).reprX))) ‚â™‚â´ biprod.mapIso (Functor.representableByEquivAdd.toFun
    (A ‚ãô forget AddCommGrp).representableBy) (Functor.representableByEquivAdd.toFun
    (B ‚ãô forget AddCommGrp).representableBy))))‚ü©

def biproduct.KernelOfMap (n : ‚Ñï) (A : Fin n ‚Üí ((C·µí·µñ ‚•§ AddCommGrp.{v})))
    (B : Fin n ‚Üí ((C·µí·µñ ‚•§ AddCommGrp.{v}))) (u : (i : Fin n) ‚Üí (A i ‚ü∂ B i)) :
    IsLimit (KernelFork.ofŒπ (f := biproduct.map u) (biproduct.map (fun i ‚Ü¶ kernel.Œπ (u i)))
    (by rw [‚Üê biproduct.map_comp]; simp only [Functor.comp_obj, Functor.flip_obj_obj, kernel.condition]; exact biproduct.map_zero)) where
  lift s := by
    refine biproduct.lift (fun i ‚Ü¶ kernel.lift (u i) (Fork.Œπ s ‚â´ biproduct.œÄ A i) ?_)
    have := biproduct.hom_ext_iff.mp (KernelFork.condition s) i
    dsimp at this
    rw [assoc, biproduct.map_œÄ, ‚Üê assoc, zero_comp] at this
    exact this
  fac s j := by
    match j with
    | WalkingParallelPair.zero =>
      dsimp
      simp only [biproduct.lift_map, kernel.lift_Œπ]
      refine biproduct.hom_ext _ _ (fun j ‚Ü¶ ?_)
      simp only [biproduct.lift_œÄ]
    | WalkingParallelPair.one =>
      dsimp
      simp only [biproduct.lift_map_assoc, kernel.lift_Œπ, biproduct.lift_map, assoc,
        Fork.app_one_eq_Œπ_comp_left, Functor.const_obj_obj, parallelPair_obj_zero,
        KernelFork.condition]
      refine biproduct.hom_ext _ _ (fun j ‚Ü¶ ?_)
      simp only [biproduct.lift_œÄ, zero_comp]
      have := biproduct.hom_ext_iff.mp (KernelFork.condition s) j
      dsimp at this
      rw [assoc, biproduct.map_œÄ, ‚Üê assoc, zero_comp] at this
      exact this
  uniq s m eq := by
    refine biproduct.hom_ext _ _ (fun j ‚Ü¶ ?_)
    rw [‚Üê cancel_mono (kernel.Œπ (u j))]
    dsimp
    simp only [assoc, biproduct.lift_œÄ, kernel.lift_Œπ]
    have := (biproduct.hom_ext_iff.mp (eq WalkingParallelPair.zero)) j
    dsimp at this
    simp only [assoc, biproduct.map_œÄ] at this
    exact this

def biproduct.map_kernel (n : ‚Ñï) (A : Fin n ‚Üí ((C·µí·µñ ‚•§ AddCommGrp.{v})))
    (B : Fin n ‚Üí ((C·µí·µñ ‚•§ AddCommGrp.{v}))) (u : (i : Fin n) ‚Üí (A i ‚ü∂ B i)) :
    biproduct (fun i ‚Ü¶ kernel (u i)) ‚âÖ kernel (biproduct.map u) := by
  set e := IsLimit.conePointUniqueUpToIso (biproduct.KernelOfMap n A B u) (kernelIsKernel (biproduct.map u))
  exact e

lemma IsFinitelyPresented_isClosedUnderFiniteBiproduct (n : ‚Ñï) (c : Fin n ‚Üí ((C·µí·µñ ‚•§ AddCommGrp.{v})))
    (hc : ‚àÄ (i : Fin n), IsFinitelyPresented C (c i)) : IsFinitelyPresented C (biproduct c) := by
  choose A B u hu v hv Arep Brep using hc
  have : (biproduct A ‚ãô forget AddCommGrp).IsRepresentable := inferInstance
  have : (biproduct B ‚ãô forget AddCommGrp).IsRepresentable := inferInstance
  use biproduct A, biproduct B, biproduct.map u, biproduct.map_epi u
  have := biproduct.map_epi v
  use biproduct.map v ‚â´ (biproduct.map_kernel n _ _ u).hom, inferInstance

instance : (IsFinitelyPresented C).ContainsFiniteProducts where
  contains_product n c := by
    refine {contains_limit := ?_}
    set A := biproduct (fun (i : Fin n) ‚Ü¶ (c i).1)
    have hA : IsFinitelyPresented C A := by
      exact IsFinitelyPresented_isClosedUnderFiniteBiproduct n (fun (i : Fin n) ‚Ü¶ (c i).1)
       (fun i ‚Ü¶ (c i).2)
    set d : Fan c := Fan.mk (‚ü®A, hA‚ü© : FinitelyPresented C)
      (fun i ‚Ü¶ biproduct.œÄ (fun (i : Fin n) ‚Ü¶ (c i).1) i)
    refine ‚ü®d, Nonempty.intro {lift s := ?_, fac s i := ?_, uniq s m hm := ?_}‚ü©
    ¬∑ exact biproduct.lift (fun i ‚Ü¶ s.œÄ.app {as := i})
    ¬∑ dsimp [d]
      simp
    ¬∑ refine biproduct.hom_ext _ _ (fun i ‚Ü¶ ?_)
      simp only [biproduct.lift_œÄ, A, d]
      rw [‚Üê hm {as := i}]
      rfl

instance : HasBinaryBiproducts (FinitelyPresented C) := hasBinaryBiproducts_of_finite_biproducts _

lemma finitelyPresented_presentation (X : FinitelyPresented C) (B : C·µí·µñ ‚•§ AddCommGrp.{v})
    [(B ‚ãô forget AddCommGrp).IsRepresentable] (g : B ‚ü∂ X.1) [Epi g] :
    ‚àÉ (A : C·µí·µñ ‚•§ AddCommGrp.{v}) (f : A ‚ü∂ kernel g) (_ : Epi f),
    (A ‚ãô forget AddCommGrp).IsRepresentable := by
  obtain ‚ü®A', B', f', g', _, zero, hA', hB', exact‚ü© :=
    (isFinitelyPresented_iff_shortComplex_representable X.1).mp X.2
  obtain ‚ü®h, comm‚ÇÅ‚ü© := IsRepresentable_proj B B' X.1 g g'
  obtain ‚ü®k, comm‚ÇÇ‚ü© := IsRepresentable_proj B' B X.1 g' g
  use A' ‚äû B
  have zero' : biprod.desc (f' ‚â´ k) (ùüô B - h ‚â´ k) ‚â´ g = 0 := by
    refine biprod.hom_ext' _ _ ?_ ?_
    ¬∑ simp only [biprod.inl_desc_assoc, assoc, comp_zero]
      rw [‚Üê comm‚ÇÇ, zero]
    ¬∑ simp only [biprod.inr_desc_assoc, Preadditive.sub_comp, id_comp, assoc, comp_zero]
      rw [‚Üê comm‚ÇÇ, ‚Üê comm‚ÇÅ, sub_self]
  use kernel.lift g (biprod.desc (f' ‚â´ k) (ùüô B - h ‚â´ k)) zero'
  simp only [exists_prop]
  refine ‚ü®?_, IsRepresentable_isClosedUnderBinaryBiproduct A' B hA' inferInstance‚ü©
  rw [epi_iff_surjective_up_to_refinements]
  intro Z a
  have ha‚ÇÄ : a ‚â´ kernel.Œπ g ‚â´ h ‚â´ k ‚â´ g = 0 := by
    rw [‚Üê comm‚ÇÇ, ‚Üê comm‚ÇÅ, kernel.condition, comp_zero]
  have ha‚ÇÅ : a ‚â´ kernel.Œπ g ‚â´ h ‚â´ g' = 0 := by rw [‚Üê comm‚ÇÅ, kernel.condition, comp_zero]
  rw [ShortComplex.exact_iff_epi_kernel_lift, epi_iff_surjective_up_to_refinements] at exact
  obtain ‚ü®Z', œÄ, hœÄ, c', comp‚ü© := exact (kernel.lift g' (a ‚â´ kernel.Œπ g ‚â´ h) ha‚ÇÅ)
  use Z', œÄ, hœÄ, biprod.lift c' (œÄ ‚â´ a ‚â´ kernel.Œπ g)
  rw [‚Üê cancel_mono (kernel.Œπ g)]
  dsimp at comp
  conv_rhs => rw [assoc, kernel.lift_Œπ, biprod.lift_desc, ‚Üê kernel.lift_Œπ g' f' zero,
                  ‚Üê assoc, ‚Üê assoc, ‚Üê comp, assoc œÄ, kernel.lift_Œπ]
  dsimp
  simp

end FiniteProducts

section Cokernels

variable [Preadditive C] [HasFiniteProducts C]

instance : (IsFinitelyPresented C).ContainsCokernels where
  contains_cokernel {K K'} u := by
    refine {contains_colimit := ?_}
    obtain ‚ü®A, B, f, g, _, zero, hA, hB, exact‚ü© :=
      (isFinitelyPresented_iff_shortComplex_representable K.1).mp K.2
    obtain ‚ü®A', B', f', g', _, zero', hA', hB', exact'‚ü© :=
      (isFinitelyPresented_iff_shortComplex_representable K'.1).mp K'.2
    obtain ‚ü®v, comm‚ü© := IsRepresentable_proj B B' K'.1 (g ‚â´ u) g'
    set L : C·µí·µñ ‚•§ AddCommGrp := cokernel u
    have hL : IsFinitelyPresented C L := by
      rw [isFinitelyPresented_iff_shortComplex_representable]
      set S := coker_sequence g (ShortComplex.mk f' g' zero') v u comm
      use S.X‚ÇÅ, S.X‚ÇÇ, S.f, S.g, inferInstance, S.zero
      refine ‚ü®?_, hB', coker_sequence_exact g _ exact' v u comm ‚ü©
      exact IsRepresentable_isClosedUnderBinaryBiproduct B A' hB hA'
    refine ‚ü®CokernelCofork.ofœÄ (f := u) (Z := ‚ü®L, hL‚ü©) (cokernel.œÄ u (C := C·µí·µñ ‚•§ AddCommGrp))
      (cokernel.condition u (C := C·µí·µñ ‚•§ AddCommGrp)),
      Nonempty.intro {desc s := ?_, fac s j := ?_, uniq s m hm := ?_}‚ü©
    ¬∑ refine cokernel.desc u (s.Œπ.app WalkingParallelPair.one) ?_ (C := C·µí·µñ ‚•§ AddCommGrp)
      erw [s.Œπ.naturality WalkingParallelPairHom.left]
      dsimp
      have := s.Œπ.naturality WalkingParallelPairHom.right
      dsimp at this
      rw [‚Üê this]
      simp
    ¬∑ match j with
      | WalkingParallelPair.zero =>
        dsimp
        erw [cokernel.condition u (C := C·µí·µñ ‚•§ AddCommGrp)]
        have := s.Œπ.naturality WalkingParallelPairHom.right
        dsimp at this
        simp only [zero_comp, comp_id] at this
        rw [zero_comp, this]
      | WalkingParallelPair.one =>
        dsimp
        simp
    ¬∑ rw [‚Üê cancel_epi (cokernel.œÄ u (C := C·µí·µñ ‚•§ AddCommGrp))]
      simp only [coequalizer_as_cokernel, cokernel.œÄ_desc]
      exact hm WalkingParallelPair.one

instance : (IsFinitelyPresented C).Œπ.PreservesEpimorphisms where
  preserves f _ :=
    NormalMonoCategory.epi_of_zero_cokernel _ (cokernel ((IsFinitelyPresented C).Œπ.map f))
    (IsColimit.ofIsoColimit (cokernelIsCokernel ((IsFinitelyPresented C).Œπ.map f)) (Cofork.ext
    (Iso.refl _) (IsZero.eq_zero_of_tgt (IsZero.of_iso ((IsFinitelyPresented C).Œπ.map_isZero
    (IsZero.of_iso (isZero_zero _) (cokernel.ofEpi f)))
    (PreservesCokernel.iso (IsFinitelyPresented C).Œπ f).symm) _)))

lemma isFinitelyPresented_of_shortComplex_finitelyPresented (X : C·µí·µñ ‚•§ AddCommGrp.{v})
    (A B : C·µí·µñ ‚•§ AddCommGrp.{v}) (f : A ‚ü∂ B) (g : B ‚ü∂ X) [Epi g] (zero : f ‚â´ g = 0)
    (hA : IsFinitelyPresented C A) (hB : IsFinitelyPresented C B)
    (he : (ShortComplex.mk f g zero).Exact) : IsFinitelyPresented C X :=
  (IsFinitelyPresented C).prop_of_iso (PreservesCokernel.iso (IsFinitelyPresented C).Œπ f
  (X := ‚ü®A, hA‚ü©) (Y := ‚ü®B, hB‚ü©) ‚â™‚â´ (he.gIsCokernel.coconePointUniqueUpToIso
  (cokernelIsCokernel f)).symm) (cokernel f (C := FinitelyPresented C) (X := ‚ü®A, hA‚ü©)
  (Y := ‚ü®B, hB‚ü©)).2

end Cokernels

section Pseudokernels

variable [Preadditive C]

class HasPseudokernel {X Y : C} (f : X ‚ü∂ Y) where
    exists_pseudokernel : ‚àÉ (Z : C) (g : Z ‚ü∂ X) (zero : g ‚â´ f = 0),
      Nonempty (IsLimit (KernelFork.ofŒπ (f := preadditiveYoneda.map f) (preadditiveYoneda.map g)
      (by rw [‚Üê Functor.map_comp, zero, Functor.map_zero])))

variable (C) in
class HasPseudokernels where
    has_pseudokernel : ‚àÄ {X Y : C} (f : X ‚ü∂ Y), HasPseudokernel f

instance [HasPseudokernels C] {X Y : C} (f : X ‚ü∂ Y) : HasPseudokernel f :=
  HasPseudokernels.has_pseudokernel f

def pseudokernel {X Y : C} (f : X ‚ü∂ Y) [HasPseudokernel f] : C :=
  (HasPseudokernel.exists_pseudokernel (f := f)).choose

def pseudokernel.Œπ {X Y : C} (f : X ‚ü∂ Y) [HasPseudokernel f] : pseudokernel f ‚ü∂ X :=
  (HasPseudokernel.exists_pseudokernel (f := f)).choose_spec.choose

lemma pseudokernel.condition {X Y : C} (f : X ‚ü∂ Y) [HasPseudokernel f] : pseudokernel.Œπ f ‚â´ f = 0 :=
  (HasPseudokernel.exists_pseudokernel (f := f)).choose_spec.choose_spec.choose

def pseudokernelIsPseudokernel {X Y : C} (f : X ‚ü∂ Y) [HasPseudokernel f] :
    IsLimit (KernelFork.ofŒπ (preadditiveYoneda.map (pseudokernel.Œπ f))
    (by rw [‚Üê Functor.map_comp, pseudokernel.condition f, Functor.map_zero])) :=
  Classical.choice (HasPseudokernel.exists_pseudokernel (f := f)).choose_spec.choose_spec.choose_spec

end Pseudokernels

section Kernels

variable [Preadditive C] [HasPseudokernels C] [HasFiniteProducts C]

lemma kernelIsRepresentable (A B : C·µí·µñ ‚•§ AddCommGrp.{v}) [(A ‚ãô forget AddCommGrp).IsRepresentable]
    [(B ‚ãô forget AddCommGrp).IsRepresentable] (f : A ‚ü∂ B) :
    (kernel f ‚ãô forget AddCommGrp).IsRepresentable := by
  set fA := Functor.representableByEquivAdd.toFun (A ‚ãô forget AddCommGrp).representableBy
  set fB := Functor.representableByEquivAdd.toFun (B ‚ãô forget AddCommGrp).representableBy
  obtain ‚ü®u, hu‚ü© := preadditiveYoneda.map_surjective (fA.hom ‚â´ f ‚â´ fB.inv)
  refine Functor.RepresentableBy.isRepresentable (Y := pseudokernel u)
    (Functor.representableByEquivAdd.invFun ?_)
  have limc : IsLimit (KernelFork.ofŒπ (f := preadditiveYoneda.map u) (kernel.Œπ f ‚â´ fA.inv)
      (by rw [hu]; simp)) := by
    refine KernelFork.isLimitOfIsLimitOfIff (kernelIsKernel f) _ fA.symm (fun _ _ ‚Ü¶ ?_)
    rw [hu, ‚Üê assoc _ fA.hom, Iso.symm_hom, Iso.inv_hom_id, id_comp, ‚Üê assoc]
    exact ‚ü®fun h ‚Ü¶ by rw [h, zero_comp], fun h ‚Ü¶ by rw [‚Üê cancel_mono fB.inv, h, zero_comp]‚ü©
  exact (pseudokernelIsPseudokernel u).conePointUniqueUpToIso limc ‚â™‚â´
    KernelFork.mapIsoOfIsLimit limc (limit.isLimit (parallelPair f 0))
    (Arrow.isoMk fA fB (by dsimp; rw [hu, assoc, assoc, Iso.inv_hom_id, comp_id]))

lemma isFinitelyPresented_kernel_epi_representable_to_finitelyPresented (X : FinitelyPresented C)
    (A' : C·µí·µñ ‚•§ AddCommGrp.{v}) [(A' ‚ãô forget AddCommGrp).IsRepresentable] (f : A' ‚ü∂ X.1) [Epi f] :
    IsFinitelyPresented C (kernel f) := by
  rw [isFinitelyPresented_iff_shortComplex_representable]
  obtain ‚ü®A, g, _, hA‚ü© := finitelyPresented_presentation  X A' f
  have hB : (kernel g ‚ãô forget AddCommGrp).IsRepresentable := by
    have := kernelIsRepresentable A A' (g ‚â´ kernel.Œπ f)
    set e : kernel g ‚âÖ kernel (g ‚â´ kernel.Œπ f) := (isKernelCompMono (kernelIsKernel g) (kernel.Œπ f)
       rfl).conePointUniqueUpToIso (limit.isLimit (parallelPair (g ‚â´ kernel.Œπ f) 0))
    exact isRepresentable_of_natIso _ (isoWhiskerRight e.symm (forget AddCommGrp))
  use kernel g, A, kernel.Œπ g, g, inferInstance, kernel.condition g
  exact ‚ü®hB, hA, ShortComplex.exact_of_f_is_kernel _ (kernelIsKernel g)‚ü©

instance : (IsFinitelyPresented C).ContainsKernelsOfEpi where
  contains_kernel {K K'} u hu := by
    have : Epi (C := C·µí·µñ ‚•§ AddCommGrp) (u : K.1 ‚ü∂ K'.1) := (IsFinitelyPresented C).Œπ.map_epi u
    refine {contains_limit := ?_}
    obtain ‚ü®A, B, f, g, _, zero, hA, hB, exact‚ü© :=
      (isFinitelyPresented_iff_shortComplex_representable K.1).mp K.2
    obtain ‚ü®A', B', f', g', _, zero', hA', hB', exact'‚ü© :=
      (isFinitelyPresented_iff_shortComplex_representable K'.1).mp K'.2
    set L := kernel (C := C·µí·µñ ‚•§ AddCommGrp) u
    have hL : IsFinitelyPresented C L := by
      let S := kernelCokernelCompSequence g u
      have hS := kernelCokernelCompSequence_exact g u
      have : Epi (S.map' 1 2) := ((S.sc hS.toIsComplex 1).exact_iff_epi (IsZero.eq_zero_of_tgt
        (IsZero.of_iso (isZero_zero _) (cokernel.ofEpi g)) _)).mp (hS.exact 1 (by omega))
      have h‚ÇÄ : IsFinitelyPresented C (S.obj 0) :=
        isFinitelyPresented_kernel_epi_representable_to_finitelyPresented K B g
      have h‚ÇÅ : IsFinitelyPresented C (S.obj 1) :=
        isFinitelyPresented_kernel_epi_representable_to_finitelyPresented K' B (g ‚â´ u)
      have : 2 ‚â§ 5 := by omega
      exact isFinitelyPresented_of_shortComplex_finitelyPresented (S.obj 2) (S.obj 0) (S.obj 1)
        (S.map' 0 1) (S.map' 1 2 one_le_two this) (hS.toIsComplex.zero 0 (by omega)) h‚ÇÄ h‚ÇÅ
        (hS.exact 0 (by omega))
    refine ‚ü®KernelFork.ofŒπ (C := FinitelyPresented C) (Z := ‚ü®L, hL‚ü©) (kernel.Œπ u
      (C := C·µí·µñ ‚•§ AddCommGrp)) (kernel.condition u (C := C·µí·µñ ‚•§ AddCommGrp)),
      Nonempty.intro {lift s := ?_, fac s j := ?_, uniq s m hm := ?_}‚ü©
    ¬∑ refine kernel.lift u (C := C·µí·µñ ‚•§ AddCommGrp) (s.œÄ.app WalkingParallelPair.zero) ?_
      have := s.œÄ.naturality WalkingParallelPairHom.left
      dsimp at this
      rw [id_comp] at this; rw [‚Üê this]
      have := s.œÄ.naturality WalkingParallelPairHom.right
      dsimp at this
      rw [id_comp] at this; rw [this, comp_zero]
    ¬∑ match j with
      | WalkingParallelPair.zero => dsimp; simp
      | WalkingParallelPair.one =>
        dsimp
        erw [kernel.condition u (C := C·µí·µñ ‚•§ AddCommGrp)]; rw [comp_zero]
        have := s.œÄ.naturality WalkingParallelPairHom.right
        dsimp at this
        rw [id_comp, comp_zero] at this
        exact this.symm
    ¬∑ rw [‚Üê cancel_mono (kernel.Œπ u (C := C·µí·µñ ‚•§ AddCommGrp))]
      dsimp; simp only [kernel.lift_Œπ]
      exact hm WalkingParallelPair.zero

instance : (IsFinitelyPresented C).ContainsKernels :=
  ContainsKernels_of_containsKernelsEpiAndCokernels _

instance : IsAbelian (IsFinitelyPresented C) := IsAbelian_ofKernelsOfEpi _

end Kernels
